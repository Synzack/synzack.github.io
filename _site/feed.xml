<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-02T06:11:25-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Red Team Blog</title><subtitle>An amazing website.</subtitle><author><name>Zach Stein</name></author><entry><title type="html">Oauth Token Stealing</title><link href="http://localhost:4000/OAuth-Token-Stealing/" rel="alternate" type="text/html" title="Oauth Token Stealing" /><published>2020-05-29T00:00:00-04:00</published><updated>2020-05-29T00:00:00-04:00</updated><id>http://localhost:4000/OAuth-Token-Stealing</id><content type="html" xml:base="http://localhost:4000/OAuth-Token-Stealing/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;

&lt;p&gt;The techniques presented in this paper are not necessarily new and were not initially discovered by myself. There is notable research that was done by &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html&quot;&gt;FireEye&lt;/a&gt; and &lt;a href=&quot;https://www.mdsec.co.uk/2019/07/introducing-the-office-365-attack-toolkit/&quot;&gt;MDSec&lt;/a&gt; prior to this publication that sparked this report. The goal of this post is to build on their research, give a background of the techniques used, and present new tools for security teams to use as testing frameworks in the future.&lt;/p&gt;

&lt;p&gt;In addition, this paper only covers OAuth abuse from the perspective of Microsoft accounts. This technique can be implemented on any service using similar OAuth protocols or permissions. Whether it be mobile apps, social media, personal email, or professional accounts, be sure to always review the permissions requested and the request source when granting third party access.&lt;/p&gt;

&lt;h1 id=&quot;oauth&quot;&gt;OAuth&lt;/h1&gt;

&lt;h2 id=&quot;what-is-oauth&quot;&gt;What is OAuth?&lt;/h2&gt;

&lt;p&gt;OAuth is an open standard authorization protocol/framework that make it possible for applications, servers, and other unrelated services to have a way to have secure authenticated access. The protocol is designed to be able to do this without sharing any logon credentials (such as the user’s actual password). If you would like to learn more how the protocol works, check out this &lt;a href=&quot;https://www.csoonline.com/article/3216404/what-is-oauth-how-the-open-authorization-framework-works.html&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OAuth was released in 2010 and has been expanded upon in OAuth 2.0, released in 2012. It has become a widely used authentication platform used by corporations such as Amazon, Facebook, and Microsoft.&lt;/p&gt;

&lt;p&gt;The general operational flow for this authentication is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A user needs to authenticate to a website or service outside of their organization&lt;/li&gt;
  &lt;li&gt;The resource forwards the user to a second authorization website on behalf of the user, where OAuth is used to provide the user’s identity&lt;/li&gt;
  &lt;li&gt;If not already authenticated, the user may be asked to provide credentials&lt;/li&gt;
  &lt;li&gt;The second site confirms the user’s identity and returns an access-token to the first website&lt;/li&gt;
  &lt;li&gt;The first site uses this token to authenticate to the necessary services on behalf of the user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is a general diagram of the OAuth flow from &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&quot;&gt;Digital Ocean&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/Dig-Ocean-OAuth.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an oversimplified explanation, but you may use OAuth in your everyday workflow without even knowing. For example, let’s say you want to access your Office365 applications such as OneDrive, Office, and SharePoint. Here is the flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You go to ‘Office.com’ and click the button to sign-in.&lt;/li&gt;
  &lt;li&gt;You enter your corporate email address, and the site says, “Taking you to your organization’s sign-in page”&lt;/li&gt;
  &lt;li&gt;You are forwarded to the corporate Okta (or other sign-in) page, where you input your domain credentials and two-factor authentication (if applicable)&lt;/li&gt;
  &lt;li&gt;Once authenticated to your organization, you are redirected back to ‘Office.com’ and have all your applications available to you&lt;/li&gt;
  &lt;li&gt;Behind the scenes, an access-token was given to Office365 to authenticate you, but your domain password was never exchanged&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;microsoft-graph-api&quot;&gt;Microsoft Graph API&lt;/h2&gt;

&lt;p&gt;In many modern-day environments, Microsoft Office products are typically integrated to increase productivity, collaboration, and create deliverables. Some common examples are the Microsoft Office Suite (Word, Excel, PowerPoint, etc.) for projects, Outlook for email, SharePoint for sharing company resources, and OneDrive for cloud storage.&lt;/p&gt;

&lt;p&gt;To further integrate these tools, Microsoft as introduced the &lt;a href=&quot;https://docs.microsoft.com/en-us/graph/use-the-api&quot;&gt;Microsoft Graph API&lt;/a&gt;, which is a &lt;a href=&quot;https://restfulapi.net/&quot;&gt;RESTful&lt;/a&gt; web API that enables users and applications to access these services through their request system. In order to use these tools, an access-token needs to be granted to the application, through the same OAuth protocols we discussed above.&lt;/p&gt;

&lt;p&gt;These API calls can be used to perform many actions on behalf of the user including reading email, sending email, accessing files, reading user information, and much more. If there is an action you would like to perform on a Microsoft cloud product, there is likely an API call for that. For a full list of permissions that can be granted to an app, please visit the official Microsoft permission references &lt;a href=&quot;https://docs.microsoft.com/en-us/graph/permissions-reference&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have ever seen a prompt such as the following, you have likely interreacted this service in some way, shape, or form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/permission-prompt.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below are graphic from the Microsoft &lt;a href=&quot;https://docs.microsoft.com/en-us/graph/overview&quot;&gt;documentation&lt;/a&gt; with a visualization of the Graph API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/ms-graph1.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/ms-graph2.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;room-for-abuse&quot;&gt;Room for Abuse&lt;/h1&gt;

&lt;h2 id=&quot;what-are-the-security-implications&quot;&gt;What are the Security Implications?&lt;/h2&gt;

&lt;p&gt;If you are reading this, you probably know that we are not here to discuss all the great, legitimate things these tools can be used for. Like most technology, if it can be used for good, it likely can be used for bad. So, if that is the case, what are the negative security implications of this technology?&lt;/p&gt;

&lt;p&gt;On one hand, this method of authentication protects the user’s credential material. It also requires authorization from the user and, if configured, their organization. The issue arises when a rogue site or application requests these same access tokens and is given approval through methods such as phishing and social engineering, where security controls are not in place to block the authorization. We will be focusing on this scenario for the purposes of this paper.&lt;/p&gt;

&lt;p&gt;Once granted permissions, the malicious service now has an access token that can act on behalf of the user for each service it has permissions to. One of the most interesting parts is that since no credential material is exchanged, the service will still have access after a password reset by the user. This also means this method can bypass multi-factor authentication. The access is only revoked if the token expires, or the permissions are explicitly revoked by either the user or the organization’s Office365/Azure administrator.&lt;/p&gt;

&lt;p&gt;This technique was famously used in recent years by APT28 (most commonly known as Fancy Bear, Sofacy, and Pawn Storm). The group implemented OAuth phishing techniques within their 2016 campaigns against the German Christian Democratic Union (CDU), Turkish government, and arguably most famously (at least in the USA) the Democratic National Convention (DNC). Trend Micro has an excellent &lt;a href=&quot;https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks/&quot;&gt;article&lt;/a&gt; on this topic.&lt;/p&gt;

&lt;p&gt;Through these technologies, this Russian nation-state group was able to gain unauthorized access to emails, files, and other sensitive information.&lt;/p&gt;

&lt;p&gt;Below is a graphic from Trend Micro’s article which illustrates the attack chain of the above campaign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pawnstorm.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-do-these-applications-work&quot;&gt;How do these Applications Work?&lt;/h1&gt;

&lt;p&gt;To gain an understanding of how these technologies can be abused, we will walk through how to create a proof of concept rogue application from a Red Team perspective. We will create a simple application using the Microsoft documentation.&lt;/p&gt;

&lt;p&gt;The first step is to head over to the Azure portal at &lt;a href=&quot;https://portal.azure.com&quot;&gt;https://portal.azure.com&lt;/a&gt;. Once you sign in with a Microsoft account, you should be presented with the home panel. To get to the application management page, we need to go to “Manage Azure Active Directory.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure1.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the next page, you should see a panel that includes “App registrations.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure2.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, go to “New Registration”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure3.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give the application a name and set the supported account types to your choosing. For this demonstration, we chose accounts in any directory and personal Microsoft accounts to cover all target scenarios. We will set redirects later, so do not worry about this for now. Once complete, go ahead and click “Register”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure4.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the app is registered, we can see a quickstart guide. I found this to be a great resource in creating an application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure5.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this demonstration we will be using a web application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure6.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I prefer Python for creating my tools, so we will pick their Python option for this demonstration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure7.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we will find sample code and instructions on how to get started with a simple python-based web application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure8.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;creating-an-application&quot;&gt;Creating an Application&lt;/h1&gt;

&lt;p&gt;Step 1) Configure your application in Azure Portal&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a reply URL:
    &lt;ul&gt;
      &lt;li&gt;Head over to the “Authentication” tab on our app panel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure9.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a platform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure10.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choose Web Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure11.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the redirect URL (This can be any web server running your application)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure12.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2) Create a Client Secret&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the “Certificates &amp;amp; secrets” panel. Create a new secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure13.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure14.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a name and expiration. Once confirmed, you should have secret value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure15.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/azure16.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have everything we need to start creating our Python Application. Go ahead and download the code sample from the quickstart guide page and install requirements if you haven’t already.&lt;/p&gt;

&lt;p&gt;There are two main programs we will be concerned with, ‘app.py’ and ‘app_config.py’. These are the backbone for our application.&lt;/p&gt;

&lt;p&gt;To configure for use, we need to edit the app_config.py file with our client secret and client ID. These can be found on our application panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/config1.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the REDIRECT_PATH variable is the redirect URL we configured in our setup, if this were setup to a different path, we would need to change it here.&lt;/p&gt;

&lt;p&gt;SCOPE is used to define the permissions needed. For the first demonstration, “&lt;em&gt;User.ReadBasic.All&lt;/em&gt;’ will work with a work or school account. If you are using a personal account, add ‘&lt;em&gt;User.Read&lt;/em&gt;.’&lt;/p&gt;

&lt;p&gt;SCOPE will also need to be modified accordingly when adding more API calls as each requires a different permission set.&lt;/p&gt;

&lt;p&gt;Now, with the configuration file set up, our application should be ready to test. &lt;em&gt;Run the app.py&lt;/em&gt; program. This will create a web server using &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/&quot;&gt;Flask&lt;/a&gt;. By default, it runs on localhost:5000, which is our redirect URL in the configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app1.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a browser, the application index page looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app2.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we click on “Sign-in” we are redirected to Microsoft to authenticate with OAuth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app3.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once authenticated, Microsoft will ask the user if they want to allow this application to access their info, based on the permissions outlined in our SCOPE. As we only have the user read permissions, it is the only permission requested in the prompt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app4.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once accepted, we can see a request to our token page and the user is authenticated with the application. Behind the scenes, an access-token was returned to our web application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app5.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft has included a basic call to their Graph API in the demo, which we can see with “Call Microsoft Graph API” hyperlink.&lt;/p&gt;

&lt;p&gt;When we go to this page, we can see a JSON response to the API call, displaying the user information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/app6.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have successfully called the Microsoft Graph API!&lt;/p&gt;

&lt;h1 id=&quot;breaking-down-the-application-api-calls&quot;&gt;Breaking Down the Application API Calls&lt;/h1&gt;

&lt;p&gt;To make sure we know what is going on under the hood, let’s take a high-level look at the sample code that calls the API. I encourage you to review and understand the rest of the code, but we will not go over the whole program in this paper.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;app.py&lt;/em&gt; code, we can see the API call in the &lt;em&gt;/graphcall&lt;/em&gt; Flask route. This code contains the actual API call used on the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/api1.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the API call code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;graph_data = requests.get(app_config.ENDPOINT, headers={‘Authorization’: ‘Bearer ‘ + token[‘access_token’]},).json()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the heart of the application’s API. Let’s add some print statements to understand the actual request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/api2.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we restart the web server and call the Graph API, we get the following output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/api3.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Breaking it down, the function is making an HTTP GET request to:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‘https://graph.microsoft.com/v1.0/users’ using the header: ”’Authorization’: ‘Bearer ‘ + UserAccesstoken”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;According to the Microsoft Graph API documentation for “&lt;a href=&quot;https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&amp;amp;tabs=http&quot;&gt;&lt;em&gt;Get a user&lt;/em&gt;&lt;/a&gt;”, this is the exact API call you need to make to get the user information.&lt;/p&gt;

&lt;p&gt;The token you see is what is passed to the application from Microsoft when the user authenticates with OAuth, along with some other parameters. The most important being the access-token, and the refresh-token. By default, the access-token has a lifespan of one hour and needs to be refreshed by calling the API with the refresh-token. By default, the refresh token is valid for 14 days.&lt;/p&gt;

&lt;p&gt;With this token, the application has full access to any resources the user allowed in the permission prompt. With this token, we can create our own requests to the API and access resources such as emails, files, and shared sites.&lt;/p&gt;

&lt;p&gt;For documentation on the different types of functionality and parameters, please visit the Microsoft Graph REST API v1.0 &lt;a href=&quot;https://docs.microsoft.com/en-us/graph/api/overview?%5C=&amp;amp;view=graph-rest-1.0&quot;&gt;Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;tools-for-red-teams&quot;&gt;Tools for Red Teams&lt;/h1&gt;

&lt;h2 id=&quot;pwnauth&quot;&gt;PwnAuth&lt;/h2&gt;

&lt;p&gt;For red teamers and security researchers, there are already existing frameworks that can be used to test this activity. The first tool goes by the name ‘&lt;a href=&quot;https://github.com/fireeye/PwnAuth&quot;&gt;&lt;em&gt;PwnAuth&lt;/em&gt;&lt;/a&gt;’ and was published in May of 2018 by FireEye. This tool uses a combination of Nginx, Django, and Docker to create an interactive web console for security researchers to test the techniques mentioned above.&lt;/p&gt;

&lt;p&gt;This tool currently has the following functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reading mail messages&lt;/li&gt;
  &lt;li&gt;Searching the user’s mailbox&lt;/li&gt;
  &lt;li&gt;Reading the user’s contacts&lt;/li&gt;
  &lt;li&gt;Downloading messages and attachments&lt;/li&gt;
  &lt;li&gt;Searching OneDrive and downloading files&lt;/li&gt;
  &lt;li&gt;Sending messages on behalf of the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a quick snippet from their &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html&quot;&gt;website&lt;/a&gt; of their web GUI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pwnauth.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;office-365-attack-toolkit&quot;&gt;Office 365 Attack Toolkit&lt;/h2&gt;

&lt;p&gt;Another tool worth mentioning is the &lt;a href=&quot;https://github.com/mdsecactivebreach/o365-attack-toolkit&quot;&gt;&lt;em&gt;Office 365 Attack Toolkit&lt;/em&gt;&lt;/a&gt;, published by MDSec in July 2019. This tool uses a web framework written in &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; with an SQLite database backend to create a similar web interface for security researchers to test their environments against OAuth token stealing with malicious applications.&lt;/p&gt;

&lt;p&gt;This tool currently has the following functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extraction of keyworded e-mails from Outlook.&lt;/li&gt;
  &lt;li&gt;Creation of Outlook Rules.&lt;/li&gt;
  &lt;li&gt;Extraction of files from OneDrive/Sharepoint.&lt;/li&gt;
  &lt;li&gt;Injection of macros on Word documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a quick snippet from their GitHub documentation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/o365toolkit.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pynauth&quot;&gt;PynAuth&lt;/h2&gt;

&lt;p&gt;While the above tools are very useful and well put together, I had some learning curve when attempting to configure them properly. My tools of preference are those which I can quickly setup and takedown and can be quickly modified as needed, with little overhead.&lt;/p&gt;

&lt;p&gt;As part of this research, I created a Python-based framework called &lt;a href=&quot;https://github.com/Synzack/PynAuth&quot;&gt;&lt;em&gt;PynAuth&lt;/em&gt;&lt;/a&gt; which is a tool that utilizes the same techniques as the above tools. The difference is that it is written completely in Python. It is designed to be modular, and can be run right your terminal. The tool is meant to be easy to use and easily customizable depending on which API calls you wish to implement.&lt;/p&gt;

&lt;p&gt;The tool’s name is a play on the &lt;em&gt;PwnAuth&lt;/em&gt; tool name written by FireEye. &lt;em&gt;*Please note, while this tool is functional, it may contain bugs and is currently in a beta stage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Current capabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get user information&lt;/li&gt;
  &lt;li&gt;Send email on behalf of the user&lt;/li&gt;
  &lt;li&gt;Query users’ email inbox for keywords, display message, and download attachments&lt;/li&gt;
  &lt;li&gt;Access users’ OneDrive folders and download files as desired&lt;/li&gt;
  &lt;li&gt;Create email inbox rules&lt;/li&gt;
  &lt;li&gt;List/Delete email inbox rules&lt;/li&gt;
  &lt;li&gt;Refresh the users’ tokens, which allow for access up to 14 days&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Terminal View:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pynauth.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Example: Query Email&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pynauth2.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pynauth3.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/OAuth-Token-Stealing/pynauth4.jpeg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;defending-against-oauth-application-attacks&quot;&gt;Defending Against OAuth Application Attacks&lt;/h1&gt;

&lt;p&gt;While these techniques may provide a stealthy means to keep persistence in a target network, there are many measures that can be taken to prevent these attacks before they happen. Blocks for these applications will typically require proper configuration, as by default, no admin permission is needed for most resources the user already has permission to. These include things like read/write permissions to personal email and accessing both personal and corporate cloud storage resources.&lt;/p&gt;

&lt;p&gt;Some security measures that can be implemented include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Limiting the permissions that can be requested by third-party applications&lt;/li&gt;
  &lt;li&gt;Banning third-party applications altogether&lt;/li&gt;
  &lt;li&gt;Creating application white lists to include only those in use by your organization&lt;/li&gt;
  &lt;li&gt;Query your organization’s users and the applications they have granted permissions to&lt;/li&gt;
  &lt;li&gt;Logging user consent events within your cloud environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FireEye has even published a PowerShell script which can help administrators hunt for malicious applications within their cloud environments. The tool can be found on &lt;a href=&quot;https://github.com/dmb2168/OAuthHunting&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are an end user, be sure to always review third party permissions before granting access to your accounts, whether personal or professional. When in doubt, confirm with your administrator whether the application is legitimate or not.&lt;/p&gt;</content><author><name>Zach Stein</name></author><summary type="html">Preface</summary></entry><entry><title type="html">Weaponizing 28 Year Old Xlm Macros</title><link href="http://localhost:4000/Weaponizing-28-Year-Old-XLM-Macros/" rel="alternate" type="text/html" title="Weaponizing 28 Year Old Xlm Macros" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>http://localhost:4000/Weaponizing-28-Year-Old-XLM-Macros</id><content type="html" xml:base="http://localhost:4000/Weaponizing-28-Year-Old-XLM-Macros/">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Excel 4.0 macros (XLM macros) are a feature of Microsoft Excel that date back to 1992. These macros can be embedded into an Excel sheet and do not use VBA. This is significant as many modern exploit campaigns utilize &lt;a href=&quot;https://docs.microsoft.com/en-us/office/vba/api/overview/&quot;&gt;VBA&lt;/a&gt; (Visual Basic for Applications) macros, which many security appliances have signatures for.&lt;/p&gt;

&lt;p&gt;While these macros have been around for many years, research into weaponizing them is relatively new. This paper is an extension of research done by &lt;a href=&quot;https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm/&quot;&gt;Outflank&lt;/a&gt; and &lt;a href=&quot;https://www.cybereason.com/blog/excel4.0-macros-now-with-twice-the-bits&quot;&gt;Cyber Reason&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;offensive-advantages&quot;&gt;Offensive Advantages&lt;/h1&gt;

&lt;p&gt;From an offensive perspective, Excel 4.0 macros provide the following advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4.0 macros are stored differently than VBA macros, evading many AV signatures&lt;/li&gt;
  &lt;li&gt;Utilizing 4.0 macros has the potential to bypass &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&quot;&gt;AMSI&lt;/a&gt; (Antimalware Scan Interface)&lt;/li&gt;
  &lt;li&gt;4.0 macros be easily hidden within excel sheets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vba-vs-xlm-storage&quot;&gt;VBA vs XLM Storage&lt;/h2&gt;

&lt;p&gt;The following screenshot from Outflank demonstrates how VBA (left) and XLM (right) are stored in Excel containers in a 97-2003 format (.xls). VBA macros are stored in &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/mfc/ole-background?view=vs-2019&quot;&gt;OLE&lt;/a&gt; (Object Linking and Embedding) streams under the containers, while XLM macros are embedded within the Workbook OLE stream. This adds an extra layer of stealth when trying to detect XLM macros with AV and other solutions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/OLE-Streams.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-of-a-40-macro&quot;&gt;Example of a 4.0 Macro&lt;/h1&gt;

&lt;p&gt;In an excel sheet, the 4.0 macro option can be found by simply right-clicking on the current sheet and selecting &lt;strong&gt;&lt;em&gt;Insert -&amp;gt; MS Excel 4.0 Macro&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/create-step1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/create-step2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/create-step3.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The macro functions are called directly in the sheet cells and can perform a wide range of commands. For example, we can run EXEC to execute system commands and ALERT to
create pop-up messages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*A full list of Excel 4.0 Macro functions can be found at the following &lt;a href=&quot;https://d13ot9o61jdzpp.cloudfront.net/files/Excel%204.0%20Macro%20Functions%20Reference.pdf&quot;&gt;link&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/run1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/run2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;enhancing-execution-and-stealth&quot;&gt;Enhancing Execution and Stealth&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Auto_Open&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just like the VBA counterpart, these macros can be set to automatically run when the document
is opened (assuming macros are enabled in the settings or the user enables them).
To do this, the starting cell just needs to be renamed to “&lt;em&gt;Auto_Open&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/auto-open1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/auto-open2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hiding the Macro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the macro is technically a sheet within excel, it contains many of the same functionality. For example, it can be hidden just like a regular cell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/hide.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saving as an XLSM/XLS file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While 4.0 macros are not the same as VBA macros, the document still needs to be saved as an
XLSM or XLS file to be a macro enabled document. If the excel settings are set to warn the user
before enabling macros, this banner will still display with a 4.0 macro document.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/enable1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/enable2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we have a fully functioning macro that will open on start, be essentially invisible to the end
user, and will not show in the document macro ribbon. This will likely fool the unsuspecting
victim, even if they are aware of VBA macro risks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/locations.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;weaponizing-the-macro&quot;&gt;Weaponizing the Macro&lt;/h1&gt;

&lt;p&gt;While command execution can result in compromise a machine, what if we were able to further
weaponize these macros?&lt;/p&gt;

&lt;p&gt;The researchers at Outflank discovered that by utilizing the &lt;em&gt;REGISTER&lt;/em&gt; and &lt;em&gt;CALL&lt;/em&gt; functions of
these macros, they can call the Win32 API and can inject shellcode into the running process.&lt;/p&gt;

&lt;p&gt;The following is a proof of concept from their publication for injecting shellcode (32 bit):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/outflank32.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Breaking the above down (quoted from Outflank):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;REGISTER(module_name, procedure_name, type, alias, argument, macro_type, category)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Module_name is the name of the DLL, for example “Kernel32” for c:\windows\system32\kernel32.dll.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Procedure_name is the name of the exported function in the DLL, for example “VirtualAlloc“.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Type is a string specifying the types of return value and arguments of the functions.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Alias is a custom name that you can give to the function, by which you can call it later.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Argument can be used to name the arguments to the function, but is optional (and left blank in our code).&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Macro_type should be 1, which stands for function.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Category is a category number (used in ancient Excel functionality). We can specify an arbitrary category number between 1 and 14 for our purpose&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using these registers, system calls can be made directly from the macros. In this case, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc&quot;&gt;VirtualAlloc&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory&quot;&gt;WriteProcessMemory&lt;/a&gt;, and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread&quot;&gt;CreateThread&lt;/a&gt; which in combination, can write data to a specified memory address. This can be used to inject shellcode into memory. Once the full shellcode is written, a thread is created to execute the code in the allocated memory.&lt;/p&gt;

&lt;h1 id=&quot;what-about-64-bit&quot;&gt;What About 64 Bit?&lt;/h1&gt;

&lt;p&gt;Most modern operating systems have 64-bit architectures, and 64-bit versions of Microsoft Office. For offensive operations, it would be beneficial to be able to embed 64-bit shellcode. This is where the &lt;a href=&quot;https://www.cybereason.com/blog/excel4.0-macros-now-with-twice-the-bits&quot;&gt;research&lt;/a&gt; from Cyber Reason comes into play.&lt;/p&gt;

&lt;p&gt;The initial issue is best described in the Cyber Reason research:&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;This macro functionality exists in 64-bit Excel, but if you try to implement a shellcode runner using the same approach, you will quickly encounter a problem. The pointer size for a 64-bit application is, unsurprisingly, 64-bits. The available data types remain the same, which means there is no native 8 byte integer type. Using one of the floating point types will use the XMM registers, which means the function will expect the arguments to be in rcx, rdx, r8, r9 and others, according to the x64 calling convention.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However, the string data types, which are passed by reference, still seem to work. The macro system knows how to handle at least some 8 byte pointers. That doesn’t directly help, as we can’t precisely supply and receive 8-byte values.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This problem disappears when our pointers are less than 0x0000001’00000000, as they will be representable using only 4 bytes. This is true for at least for the first 4 arguments of the function, which are passed through registers, not the stack.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When entering the register, these arguments will be zero-extended, and 0x50000000 will simply become 0x00000000’50000000. The higher bits will be discarded when used as a 32-bit value.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because of this, we can use the lpAddress parameter of VirtualAlloc to specify that our memory must be allocated at a specific address in the 0x00000000-0xFFFFFFFF range, which we can supply via our available data-types. For the sake of the proof of concept, we chose 0x50000000 (1342177280) as our candidate address and attempted to run VirtualAlloc via 64-bit Excel.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Using the above information, the first call to Kernel32 will use the 0x50000000 (1342177280) value as the address. Our 64-bit macro looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The CALL function is used instead of REGISTER in this example)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/call1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;creating-excel-shellcode&quot;&gt;Creating Excel Shellcode&lt;/h1&gt;

&lt;p&gt;Now that we have a template to move data into memory, we need something to execute. Let’s create our own shellcode. For now, we will just create shellcode to spawn “calc.exe” for a proof of concept. We need to ensure that the shellcode does not contain null bytes, so we can encode it using a XOR encoder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/msfvenom1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once our shellcode file has been created, there are tools such as &lt;a href=&quot;https://github.com/mdsecactivebreach/SharpShooter&quot;&gt;SharpShooter&lt;/a&gt; contain functionality to convert this raw shellcode to a format Excel can understand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/sharpshooter1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The output of this tool is a .SLK (Symbolic Link) file which contains a macro very similar to the earlier 32-bit macro template and the associated shellcode we created. Since we are creating the 64-bit payload, we are only concerned with the shellcode for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/slk1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can copy and paste this shellcode into our proof-of-concept.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/poc1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;breaking-down-the-macro&quot;&gt;Breaking Down the Macro&lt;/h1&gt;

&lt;p&gt;Let’s break down the code and what this macro is doing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/breakdown.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;executing-shellcode&quot;&gt;Executing Shellcode&lt;/h1&gt;

&lt;p&gt;The macro is now ready to execute. To test, we can right-click on the first cell and click “Run”. This will execute the macro commands until it hits the &lt;em&gt;HALT()&lt;/em&gt; command. The Excel document ultimately crashes, but the shellcode is executed and spawns the calculator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/exec1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;mitigating-the-crash&quot;&gt;Mitigating the Crash&lt;/h1&gt;

&lt;p&gt;While the current macro works great for running commands which do not require interaction, the crashing aspect is a problem for payloads containing shells, Metasploit sessions, cobalt strike beacons, etc. This crash results from a stack corruption in &lt;em&gt;CreateThread&lt;/em&gt; after overwriting our memory address. This makes the exploit unreliable and only execute successfully some of the time.&lt;/p&gt;

&lt;p&gt;According to Cyber Reason’s research, this can be solved by “Queuing an APC (Asynchronous Procedure Call)” instead of using &lt;em&gt;CreateThread&lt;/em&gt;. According to Cyber Reason:&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;Queuing an APC (Asynchronous Procedure Call) to a thread will make the thread execute caller provide code in the context of that thread as soon as it enters an alertable state. The QueueUserAPC, used for this purpose, only needs three arguments and thus will not look for parameters on the stack. We use this function to queue an APC containing the address of our shellcode to the current thread. The current thread is the thread handling our CALL macro.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We can use a function like NtTestAlert to flush and execute the current thread’s APC queue and target the correct thread to execute our shellcode.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Going of off this statement, we can modify our macro code calling these functions instead of &lt;em&gt;CreateThread&lt;/em&gt;. With this addition, the document should not crash until the shellcode is finished executing. This means that if there is a Metasploit/Cobalt Strike session, it will not close until the session is exited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/qapc.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To fully demonstrate this functionality, we will create a Metasploit meterpreter payload. We will begin by creating meterpreter shellcode and converting it to Excel shellcode by using &lt;em&gt;MsfVenom&lt;/em&gt; and &lt;em&gt;SharpShooter&lt;/em&gt;, just as we did with the calc shellcode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/shellcode64.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we have the shellcode, we will add it to our shellcode column in our Excel macro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/poc2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the macro, we are greeted with a meterpreter shell and the excel doc will “spin” until the session is closed. This may also seem like an issue, but the beacon receiver can be configured to spawn a new shell under a different process and kill the excel process when complete. (Not demonstrated in this paper).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/exec2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/exec3.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the shellcode is injected into memory, when viewed in Process Explorer, Excel has no child processes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/procexplore.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bringing-it-all-together&quot;&gt;Bringing it All Together&lt;/h1&gt;

&lt;p&gt;Now that we have a working shellcode injection macro, lets finish weaponizing it and upload to VirusTotal to see the detection. We will start by renaming the first cell to “&lt;em&gt;Auto_Open&lt;/em&gt;” and then hide the cell from the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/biat1.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/biat2.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, lets upload to VirusTotal and check the detection rate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/vt.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have an Excel document that executes a Meterpreter payload that is undetected by all AV products on VirusTotal (At least at the time of this test).&lt;/p&gt;

&lt;h1 id=&quot;tooling&quot;&gt;Tooling&lt;/h1&gt;

&lt;p&gt;When researching this technique, there were a few tools like SharpShooter which I could use to generate the required shellcode, but none that did exactly what I wanted. As part of this project, I have created a simple python script that uses the same methods as SharpShooter to create the CHAR() shellcode, but outputs to a CSV format rather than an .SLK. It takes both x86 and x64 shellcode bin files as arguments.&lt;/p&gt;

&lt;p&gt;Another issue I ran into was assuming most computers would be running the 64 bit version of Excel. Turns out that 32 bit is the preferred version for ARM-based processors and computers with less than 4GB of RAM (regardless of whether the OS was 64 bit) according to &lt;a href=&quot;https://support.office.com/en-us/article/choose-between-the-64-bit-or-32-bit-version-of-office-2dee7807-8f95-4d0c-b5fe-6c6f49b8d261&quot;&gt;Microsoft&lt;/a&gt;. Because of this, the script also has a check to see if Excel is running in a 32 or 64 bit process and executes the shellcode accordingly.&lt;/p&gt;

&lt;p&gt;The script can be found on my GitHub &lt;a href=&quot;https://github.com/Synzack/Excel-4.0-Shellcode-Generator&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Generate your shellcode to bin files and ensure there are no null bytes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/tools1.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2) Run script with x86 and x64 bin files as arguments&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/tools2.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3) Your output file should look like the following (you may need to zoom in):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/output.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4) Copy and paste all columns to an Excel 4 Macro enabled document (including the blank first column). The macro begins at the &lt;em&gt;WORKBOOK.ACTIVATE&lt;/em&gt; in column 4. Make this your &lt;em&gt;Auto_Open&lt;/em&gt; cell and change the text in &lt;em&gt;WORKBOOK.ACTIVATE&lt;/em&gt; to the name of your macro tab. Save as a macro enabled excel file (xls or xlsm).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Weaponizing-28-Year-Old-Macros/output2.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;</content><author><name>Zach Stein</name></author><summary type="html">Overview</summary></entry></feed>